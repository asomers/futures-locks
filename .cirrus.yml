test_task:
  name: cargo test 
  matrix:
    - container:
       image: rust:1.31.0
    - container:
       image: rust:latest
    - container:
       image: rustlang/rust:nightly
  cargo_cache:
    folder: $CARGO_HOME/registry
  build_script:
    - if rustc --version | grep -q nightly; then
    -   cargo build --all-targets
    - else
    -   cargo build
    - fi
  test_script:
    - if rustc --version | grep -q nightly; then
    -   cargo test --all-targets
    - else
    -   cargo test
    - fi
    - cargo test --no-default-features
  before_cache_script: rm -rf $CARGO_HOME/registry/index

codecov_task:
  name: codecov 
  depends_on:
    - test
  environment:
    CODECOV_TOKEN: ENCRYPTED[8cd2d4365a2079c3ee4c4d7ce9cbb8ac440cd341f9e688318b923f026c7d8bfbdb0556c2c238a67b3f44dd396f25b1f5]
    # Improves coverage accuracy
    RUSTFLAGS: "-C link-dead-code"
  matrix:
    - container:
       image: rust:latest
  cargo_cache:
    folder: $CARGO_HOME/registry
  setup_script:
    - apt-get -y update
    - apt-get -y install libcurl4-openssl-dev libelf-dev libdw-dev cmake gcc binutils-dev libiberty-dev
    - cargo install cargo-kcov
    - if [ ! -x $HOME/.cargo/bin/kcov ] || [ ! -f $HOME/.cargo/bin/kcov ]; then mkdir kcov && cd kcov && cargo kcov --print-install-kcov-sh | sh && cd - && rm -rf kcov; fi
  codecov_script:
    - cargo build       # Ensure Cargo.lock exists
    - cargo kcov --verbose -- --include-pattern='futures-locks/src'
    - bash <(curl -s https://codecov.io/bash)
  before_cache_script: rm -rf $CARGO_HOME/registry/index
